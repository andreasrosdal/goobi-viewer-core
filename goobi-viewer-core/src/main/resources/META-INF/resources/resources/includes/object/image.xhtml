<ui:composition 
    xmlns="http://www.w3.org/1999/xhtml" 
    xmlns:ui="http://xmlns.jcp.org/jsf/facelets" 
    xmlns:c="http://java.sun.com/jsp/jstl/core"
    xmlns:h="http://xmlns.jcp.org/jsf/html" 
    xmlns:f="http://xmlns.jcp.org/jsf/core" 
    xmlns:jsf="http://xmlns.jcp.org/jsf" 
    xmlns:pt="http://xmlns.jcp.org/jsf/passthrough"
    xmlns:viewer="http://xmlns.jcp.org/jsf/composite/components/partner" 
    xmlns:viewerComponent="http://xmlns.jcp.org/jsf/composite/components"
    xmlns:widgetComponent="http://xmlns.jcp.org/jsf/composite/components/widgets">

    <!-- IMAGE CONTAINER -->
    <div id="imageContainer" class="view-object__image">        
        <!-- MAP -->
        <div id="imageMap" class="view-object__image-map"></div>

        <!-- MOBILE IMAGE OVERLAY -->
        <div id="imageContainerMobileOverlay" class="view-object__image-mobile-overlay"></div>
    </div>

	<popover id="share-image-area-popup">

		<div>
		<a data-copy="image-region-page" data-copy-done="#{msg.copyUrlDone}" data-clipboard-text="image-region-page"
			title="#{msg.bookmarkList_shareLink_copy}" >#{msg.label__share_image_region_page}</a>
		</div>
		<div>
			<a data-copy="image-region-image" data-copy-done="#{msg.copyUrlDone}" data-clipboard-text="image-region-image"
			title="#{msg.bookmarkList_shareLink_copy}" >#{msg.label__share_image_region_image}</a>
		</div>

	</popover> 
	
	<popover id="imageFilterPopover">
		<imageFilters/>
	</popover>


	<!-- OPEN SEADRAGON -->
    <script type="text/javascript" src="#{request.contextPath}/resources/javascript/libs/openseadragon/openseadragon.min.js"></script>
    <script type="text/javascript" src="#{request.contextPath}/resources/javascript/libs/openseadragon/openseadragon-viewerinputhook.js"></script>
    <script type="text/javascript" src="#{request.contextPath}/resources/javascript/dist/imageView.min.js"></script>
    <script type="text/javascript">
  		//<![CDATA[
  		      		    
    	var imageMap = $( "#imageMap" );
        var access = #{activeDocumentBean.viewManager.currentPage.accessPermissionImage};
        var accessDeniedImagePath = "#{request.contextPath}/resources/themes/#{navigationHelper.theme}/images/access_denied.png";
        var accessDeniedImageWrapper = $( "<div />" ).addClass( "view-object__access-denied" ).html( '<img src="' + accessDeniedImagePath + '" />' );
        var page = "#{navigationHelper.currentPage}";

        var configViewer = {
        	global: {
        		divId: "imageMap",
        		bottomMargin: () => #{activeDocumentBean.viewManager.currentPage.getFooterHeight(navigationHelper.currentPage)},
        		adaptContainerHeight: #{activeDocumentBean.viewManager.currentPage.adaptImageViewHeight},
        		persistZoom: #{configurationBean.rememberImageZoom},
        		persistRotation: #{configurationBean.rememberImageRotation},
        		persistenceId: "#{activeDocumentBean.topDocumentIddoc}" + "_" + "#{navigationHelper.currentPage}",
        		maxZoomLevel: 5,
        		controls : {
        		    rotateLeft: '.rotate-left',
        		    rotateRight: '.rotate-right',
        		    reset: '.reset',
        		},
        		overlayGroups: [ {
                    name: "searchHighlighting",
                    styleClass: "coords-highlighting",
                    interactive: false
                }, {
                    name: "ugc",
                    styleClass: "ugcBox",
                    interactive: true
                
                },
                {
                    name: "annotations",
                    styleClass: "image-fragment",
                    interactive: true
                
                }],
        	},
        	image: {
        		mimeType: "#{activeDocumentBean.viewManager.currentPage.fullMimeType}",
	       		tileSource : '#{activeDocumentBean.viewManager.currentImageInfo}',
        		baseFooterUrl : "#{activeDocumentBean.viewManager.getWatermarkUrl(navigationHelper.currentPage)}",
        		highlightCoords: [
        			{
        				name: "searchHighlighting",
        				coordinates: #{activeDocumentBean.viewManager.currentSearchResultCoords},
        				displayTooltip: false,
        				pageIndex : #{activeDocumentBean.viewManager.currentPageSourceIndex},
        			},
		            {
		                name: "ugc",
		                coordinates: (function(coords){
		                    	return coords ? coords: [];
		                	})(#{contentBean.getCurrentUGCCoords(activeDocumentBean.viewManager.currentPage)}),
		                displayTooltip: true
		            }, {
		                name: "annotations",
		                coordinates: window.location.hash,
		                displayTooltip: false
		            }
        		]
        	}
        };
        
        var imageFilterConfig = {
	        filters : {
	            brightness: {
	                label: "#{msg.label__image_filter_brightness}"
	            },
	            contrast: {
	                label: "#{msg.label__image_filter_contrast}"
	            },
	            saturate: {
	                label: "#{msg.label__image_filter_saturate}"
	            },
	            grayscale: {
	                label: "#{msg.label__image_filter_grayscale}"
	            },
	            threshold: {
	                label: "#{msg.label__image_filter_bitonal}"
	            },
	            blur: {
	                label: "#{msg.label__image_filter_blur}",
	                visible: false
	            },
	            sharpen: {
	                label: "#{msg.label__image_filter_sharpen}"
	            },
	            invert: {
	                label: "#{msg.label__image_filter_invert}"
	            },
	            hue: {
	                label: "#{msg.label__image_filter_rotate}"
	            }
	        },
	        messages: {
	            clearAll: "#{msg.action__reset_all_image_filters}"
	        }
        };
        
        var pageAreaConfig = {
                areas : #{activeDocumentBean.viewManager.currentPage.containedStructElementsAsJson},
                currentLogId : "#{activeDocumentBean.logid}"
        }
        console.log("pageAreaConfig", pageAreaConfig);
        
        // check for fullscreen and change container height 
        if ( $( '#fullscreen' ).length > 0 ) {
        	configViewer.global.adaptContainerHeight = false;
        	configViewer.global.topMargin = () => {
        	    var $header = $('#fullscreenHeader');
        	    if($header.is(":visible")) {
        	        return $header.height();
        	    } else {
        	        return 0;
        	    }
        	}
        	configViewer.global.rightMargin = () => {
        	    var $sidebar = $('#fullscreenViewSidebar');
        	    if(parseInt($sidebar.css("right")) < 0) {
        	        return 0;
        	    } else {
        	        return $sidebar.width();
        	    }
        	}
        }

       	// desktop object view
       	if ( access ) {
           	var viewImage = new ImageView.Image( configViewer )
           	viewImage.load().then( function( image ) {
    	     initImageFragmentLinks();
           	 initImageFragmentSelect(image);
           	} ).catch( function( error ) {
           		console.error( "viewObject.xhtml - viewImage.init: Error opening image" );
           		imageMap.html( viewerJS.helper.renderAlert( "alert-danger", "#{msg.noImage_fileNotFound}: " + error, false ) );
           		
           		// reload image footer in fullscreen
           		if ( page === "fullscreen" ) {
                	$( window ).on( "resize orientationchange", function() {
                		viewImage.loadFooter();                    		
                	} );
                }
           	} );
        } 
       	else {
       		imageMap.append( accessDeniedImageWrapper );
       	}

       	// mobile overlay
       	if ( window.matchMedia( '(max-width: 768px)' ).matches && page !== 'fullscreen' ) {
       		$( "#imageContainerMobileOverlay" ).show();
       	}
       	
        var fragmentSelect, event;
       	if(viewImage) {
            function selectImageFragment(button) {
                 if(fragmentSelect) {
                    if(!$(button).hasClass("active")) {
                	    $(button).tooltip("hide");
	       		        $(button).popover({
	       		            trigger: 'manual',
	       		            title: "#{msg.action__share_image_region}",
	       		            content: "#{msg.action__share_image_region__description}",
	       		            placement: 'bottom'
	       		        }).popover("show");
	       		        setTimeout( () => {
		       		            $("body").one("click.dismiss-popover", function() {
		       		         	$(button).popover("hide");
		    	      		    $(button).removeClass("active");
		    	       		 	fragmentSelect.stopSelect();
	       		        	})
	       		        }, 0);
		                $(button).addClass("active");
		                fragmentSelect.startSelect().then( area => openShareFragmentPopup(area, button) )   
		                viewImage.viewer.addOnceHandler( 'canvas-drag-end', (e) => {
		                    event = e.originalEvent;
		                });
                	}
                }
            }
       		function openShareFragmentPopup(area, button) {
       		    if(fragmentSelect) {
       		     	$(button).popover("hide");
	      		    $(button).removeClass("active");
	       		 	fragmentSelect.stopSelect();
	       		 	var areaString = viewImage.getAreaString(area);
	       		 	var pageUrl = window.location.origin + window.location.pathname + "#xywh=" + areaString;
	       		 	var imageUrl = viewImage.getRegionUrl(area);
	       		 	let popover =  viewerJS.popovers.fromEvent("canvas", event, "#share-image-area-popup", {
	       		        onClose: () => {
		       		 	    if(fragmentSelect) {
		       		     	    fragmentSelect.remove(0);
		       		     	}
	       		        },
	       		        onShow: () => {
			       		 	$("[data-copy='image-region-page']").attr("data-clipboard-text", pageUrl).tooltip();
			       		    $("[data-copy='image-region-image']").attr("data-clipboard-text", imageUrl).tooltip();
	       		        }
	       		    });

		       		$("body").off("click.dismiss-popover");
		       		initImageFragmentLinks(areaString);
       		    }
       		}
			function initImageFragmentSelect(image) {
           		// init area select
           		try { 
					let styles = viewerJS.helper.getCss("image-fragment", ['borderTopColor', 'borderTopWidth', 'background-color']);
	           		var fragmentSelectConfig = {
	           		     removeOldAreas : true,
	                     drawStyle : {
	                         borderColor: styles["borderTopColor"],
	                         borderWidth: parseInt(styles["borderTopWidth"]),
	                         fillColor: styles["background-color"],
	                     }
	           		};
	           		fragmentSelect = new ImageView.Tools.AreaSelect(image, fragmentSelectConfig);
           		} catch(error) {
           		    console.error("Error initializing area select: ", error);
           		}
			}
			
			function initImageFragmentLinks(fragment) {
			    if(!fragment) {			        
				    $wrapper = $(".widget-usage__image-fragment__wrapper");
				    fragment = viewerJS.helper.getFragmentHash();
			    }
			    if(fragment) {
			        var pageUrl = window.location.origin + window.location.pathname + "#xywh=" + fragment;
	       		 	var imageUrl = viewImage.getRegionUrl(fragment);
	       		 	$wrapper.find(".widget-usage__image-fragment-page").attr("data-clipboard-text", pageUrl)
	       		 	$wrapper.find(".widget-usage__image-fragment-image").attr("data-clipboard-text", imageUrl)
	       		 	$wrapper.show();
			    }
			}
       	}
       	
		if(viewImage) {	
		    
		    //init image filter tools
       	 	viewImage.observables.viewportUpdate.pipe(RxOp.first()).subscribe( () => {
       	 	    let originClean = viewImage.isOriginClean();
       	 	    if(originClean) {
       	 	        $(".image-controls__option.image-filter button").prop('disabled', false);
       	 	    	$(".image-controls__option.image-filter button i").tooltip("disable");
       	 	        $(".image-controls__option.image-filter button")
       	 	        .attr('title', "#{msg.label__image_filter_toolkit}")
       	 	        .tooltip('fixTitle');
       	 	        
					riot.mount("imageFilters", {
					    image: viewImage,
					    config: imageFilterConfig
				    });
       	 	    }
       	 	});
       	 	
		    //init page areas
       	 	function drawPageAreas(config, imageView) {
				let styles = viewerJS.helper.getCss("page-area", ['borderTopColor', 'borderTopWidth', 'background-color']);
				let style = {
				        borderWidth: styles["borderTopWidth"],
				        borderColor: styles["borderTopColor"],
				        fillColor: styles["background-color"]
				}
				let activeStyles = viewerJS.helper.getCss("page-area focus", ['borderTopColor', 'borderTopWidth', 'background-color']);
				let activeStyle = {
				        borderWidth: parseInt(activeStyles["borderTopWidth"]),
				        borderColor: activeStyles["borderTopColor"],
				        fillColor: activeStyles["background-color"]
				}
				
				
				
				let shadow = new ImageView.Tools.Filter.HighlightArea(imageView, -100, config.areas.filter(a => config.currentLogId === a.logId)[0], false);
				shadow.start();
		        config.areas.forEach( (area, index) => {
		            console.log("init area ", area, index);
		            let rect = ImageView.CoordinateConversion.convertToOpenSeadragonObject(area.coords);
		            rect = ImageView.CoordinateConversion.scaleToOpenSeadragon(rect, imageView.viewer, imageView.getOriginalImageSize());
		            let overlay = new ImageView.Overlay(rect, imageView.viewer, config.currentLogId === area.logId ? activeStyle : style, true);
		        	overlay.draw();
		        })
		    }
		    viewImage.observables.viewerOpen.subscribe( () => {		        
       	    	drawPageAreas(pageAreaConfig, viewImage);
		    })
		    
		} else {
		    console.error("viewImage is not defined");
		}
		       	
      	//]]>
    </script>

</ui:composition>