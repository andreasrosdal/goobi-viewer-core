<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:f="http://xmlns.jcp.org/jsf/core"
	xmlns:h="http://xmlns.jcp.org/jsf/html"
	xmlns:p="http://xmlns.jcp.org/jsf/passthrough"
	xmlns:fn="http://java.sun.com/jsp/jstl/functions"
	xmlns:c="http://java.sun.com/jsp/jstl/core"
	xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
	xmlns:jsf="http://xmlns.jcp.org/jsf"
	xmlns:composite="http://xmlns.jcp.org/jsf/composite">

	<composite:interface componentType="io.goobi.viewer.faces.components.Autocomplete">
		<composite:attribute name="value" required="true"/>
		<composite:attribute name="items" required="false" method-signature="java.util.List complete(java.lang.String)" />
		<composite:attribute name="placeholder" default=""/>
	</composite:interface>


	<composite:implementation>
		<span class="ui-autocomplete ui-inputwrapper-filled">
			<input class="ui-autocomplete-input ui-inputfield ui-widget ui-state-default ui-corner-all -no-outline -active-border ui-state-filled" 
				type="text" jsf:id="#{cc.clientId}" id="#{cc.clientId}" value="#{cc.attrs.value}" placeholder="#{cc.attrs.placeholder}"/>
		</span>
		<h:commandScript name="automcompleteRequest_#{cc.clientId}" action="#{cc.handleAutocomplete}" onevent="handleAutocompleteResponse_#{cc.clientId}"/>
		<script>
	
			//Observable for ajax responses of automcompleteRequest commandScript
			let autocompleteResponseListener_#{cc.clientId} = new rxjs.Subject();
		
			//jquery autocomplete
			let autocomplete__#{cc.clientId} = $("##{cc.clientId}").autocomplete( {
			    source: function( request, response ) {
			        //pass entered term to commandScript
			        automcompleteRequest_#{cc.clientId}({term:request.term});
			        //subscribe to ajax response listener of commandscript to fill autocomplete options
			        autocompleteResponseListener_#{cc.clientId}.pipe(rxjs.operators.first()).subscribe(resp => {
			            response(resp);
			        });
			    },
		        minLength: 3,
		        delay: 300, //ms
		        //appendTo: $("##{cc.clientId}").parent(),
		        change: function(event, ui) {
		            //console.log("change ", event, ui);
		            //refocus input field after other javascript has finished because jquery will defocus the element first
		            setTimeout( () => $("##{cc.clientId}").focus(), 0);
		        },
			});
			
			//Trigger form submit button when pressing enter
			$("##{cc.clientId}").on("keyup", e => {
			    if(e.originalEvent.key == "Enter") {
			        let $button = $(event.target).closest("form").find('input[type=submit]:first');
		            //console.log("submit button", $button);
		            $button.click();
			    }
			})
			
			//onEvent listener for commandScript ajax response. append response to responseListener observable
			handleAutocompleteResponse_#{cc.clientId} = function(e) {
			    if(e.status === "complete") {
			        autocompleteResponseListener_#{cc.clientId}.next(JSON.parse(e.responseText));
			    }
			}
		
		</script>
	
	</composite:implementation>
	
</ui:composition>