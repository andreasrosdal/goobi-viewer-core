<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:f="http://xmlns.jcp.org/jsf/core"
	xmlns:h="http://xmlns.jcp.org/jsf/html"
	xmlns:pt="http://xmlns.jcp.org/jsf/passthrough"
	xmlns:fn="http://java.sun.com/jsp/jstl/functions"
	xmlns:c="http://java.sun.com/jsp/jstl/core"
	xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
	xmlns:jsf="http://xmlns.jcp.org/jsf"
	xmlns:composite="http://xmlns.jcp.org/jsf/composite">

	<composite:interface>
		<composite:attribute name="contentList" required="true"
			type="java.util.List" />
		<composite:attribute name="sidebar" required="false"
			type="java.lang.Boolean" default="false" />
	</composite:interface>


	<composite:implementation>

		<nav id="user_generated_content_nav">
			<ul>
				<ui:repeat var="content" value="#{cc.attrs.contentList}">
					<h:panelGroup rendered="#{content.isEmpty() ? 'false':'true'}">
						<li id="words-#{content.id}"
							class="widget-annotations__entry #{content.isOnThisPage(activeDocumentBean.viewManager.currentPage) ? '-onpage' : ''}">
							<div class="widget-annotations__type">
								<i class="#{content.iconClass}" aria-hidden="true"></i>
							</div>
							<ui:fragment rendered="#{content.type != 'NORMDATA' or cc.attrs.sidebar}">
								<div class="widget-annotations__text">
									<ui:fragment rendered="#{!content.isOnOtherPage(activeDocumentBean.viewManager.currentPage)}">
										<h:outputText
											value="#{msg[contentBean.cleanUpValue(content.extendendLabel)]}"
											escape="false"></h:outputText>
									</ui:fragment>
									<ui:fragment rendered="#{content.isOnOtherPage(activeDocumentBean.viewManager.currentPage)}">
										<h:outputLink value="#{content.pageUrl}" styleClass="p-0">
											<h:outputText
												value="#{msg[contentBean.cleanUpValue(content.extendendLabel)]}"
												escape="false"></h:outputText>
										</h:outputLink>
									</ui:fragment>
								</div> 
							</ui:fragment>
							
							<ui:fragment rendered="#{content.type == 'NORMDATA' and cc.attrs.sidebar}">
								<button type="button"
									data-remotecontent="#{request.contextPath}/api/v1/authority/resolver?id=#{contentBean.getEscapedBodyUrl(content)}&amp;template=ANNOTATION&amp;lang=#{navigationHelper.localeString}/"
									data-toggle="tooltip" data-placement="top" data-trigger="hover"
									class="widget-annotations__button">
									<i class="fa fa-list-ul" aria-hidden="true"></i>
									<div class="normdata-preloader"></div>
								</button>
								<i class="fa fa-times closeAllPopovers" aria-hidden="true"
									data-toggle="tooltip" data-placement="top" data-trigger="hover"
									title="#{msg.normdataPopoverCloseAll}"></i>
							</ui:fragment>
							
							<ui:fragment rendered="#{content.type == 'NORMDATA' and not cc.attrs.sidebar}">
								<div id="annotation_body_#{content.id}" class="annotation__body__content_wrapper">#{contentBean.cleanUpValue(content.annotationBody.toString())}</div>
									<annotationBody annotationid="#{content.id}" contentid="annotation_body_#{content.id}"/>
								</ui:fragment>
								
							<div class="widget-annotations__page">
								<ui:fragment rendered="#{content.isOnAnyPage()}">
									<span>#{content.page}</span>
								</ui:fragment>
							</div>
						</li>
					</h:panelGroup>
					<script type="text/javascript">
						$("#words-#{content.id}, #words-#{content.id} div").on('click', function(e) {
						    console.log("Click on content #{content.id}");
							viewImage.overlays.focusBox("ugc", "#{content.id}");
							highlightCurrentSelection($(this));
							if(!#{cc.attrs.sidebar}) {
								$([document.documentElement, document.body]).animate({
	                                scrollTop: $("#imageContainer").offset().top - 175
	                            }, 200);
							}
						});
					</script>
				</ui:repeat>
				<script type="text/javascript">
					//<![CDATA[ 
                         var highlightCurrentSelection = function( $Obj ) {
                         	// reset styles for all li elements
                         	$( '#user_generated_content_nav li' ).removeClass( 'ugc-highlight' );
                         	
                         	// highlight clicked li element
                         	$Obj.addClass( 'ugc-highlight' );
                         };
  					    function mountRiotTags() {		                    
	                        riot.mount("annotationBody", {
	                            currentlang: "#{navigationHelper.localeString}",
	                            resturl: "#{configurationBean.restApiUrlV1}",
	                        });
		                }
					    function initView() {
	                           
	                           var coordinates = {
	                           	name: 'ugc',
	                           	displayTooltip: true,
	                           	coordinates:  #{contentBean.getCurrentUGCCoords(activeDocumentBean.viewManager.currentPage)}
	                           };
	                          
	                           // console.log("crowdsourcing coordinates: ", coordinates);
	                           if(configViewer.image && coordinates) {
	                           	if(!configViewer.image.highlightCoords) {
	                           		configViewer.image.highlightCoords = [];
	                           	}
	                           	configViewer.image.highlightCoords.push(coordinates);
	                           }

	  
	                           var normdataConfig = {
	                               path: "#{request.contextPath}",
	                               lang: {
	                                   popoverTitle: "#{msg.normdataPopverTitle}",
	                                   popoverClose: "#{msg.normdataPopoverClose}",
	                                   showNormdata: "#{msg.normdataExpand}"
	                               },
	                               elemWrapper: $( "#metadataElementWrapper" ),
	                               linkSelector: ".widget-annotations__button"
	                           };
	                           
	                           viewerJS.normdata.init( normdataConfig );
	                            mountRiotTags();
					    }
					    $(document).ready(() => initView());
	                  	//]]>	
	              </script>
			</ul>
		</nav>
	</composite:implementation>
</ui:composition>