<ui:composition 
    xmlns="http://www.w3.org/1999/xhtml" 
    xmlns:f="http://xmlns.jcp.org/jsf/core" 
    xmlns:h="http://xmlns.jcp.org/jsf/html"
    xmlns:ui="http://xmlns.jcp.org/jsf/facelets" 
    xmlns:composite="http://xmlns.jcp.org/jsf/composite">

    <!-- INTERFACE OPTIONS -->
    <composite:interface />

    <!-- COMPONENT CONTENT -->
    <composite:implementation>
        
        <!--  WIDGET Geo facetting -->
        <ui:fragment rendered="#{searchBean.facets.geoFacetting.active and (cc.attrs.widget.type == 'widgetSearchDrillDown' or cc.attrs.widget.type == null)}">
        <h:form>
	        <div class="widget widget-geofacetting">
				<div class="widget-geofacetting__topbar">
					<div class="widget-geofacetting__item geofacetting-label">
						<h3>#{msg.widget_geofacetting__label}
						<button type="button" id="expandFacetMap" data-toggle="tooltip" title="#{msg.fullscreen_enter}" class="widget-geofacetting__expand" aria-label="#{msg.fullscreen_enter}">
		                	<i class="fa fa-expand"/>
		                </button>
						</h3>
					</div>
	
				</div>
				<div class="widget__body">
					<div id="geoFacettingMap" class="geo-map"></div>
				</div>

					<h:commandButton  styleClass="d-none" action="pretty:newSearch5" value="#{msg.search}">
		                    <f:setPropertyActionListener target="#{searchBean.activeSearchType}" value="0" />
		                    <f:passThroughAttribute name="data-geofacet" value="execute"/>
		        	</h:commandButton>
		        	<h:inputHidden  value="#{searchBean.facets.geoFacetting.feature}">
		        		<f:passThroughAttribute name="data-geofacet" value="feature"/>
		        	</h:inputHidden>
		        	
				<div id="widgetGeoFacettingOverlay" class="widget-geofacetting__overlay">
					<button class="btn btn--default geo-map__reset-search" data-geofacet="reset">#{msg.reset}</button>
					<button class="btn btn--full geo-map__submit-search" data-geofacet="trigger-execute">#{msg.search}</button>
		        	<div id="geoFacettingOverlayMap" class="overlay__geomap"></div>
				</div>
	
			</div>
			<h:commandScript name="setGeoFacetFeature" render="@form" action="#{searchBean.facets.geoFacetting.setFeatureFromContext()}"
			 onevent="applyDrilldown">
			</h:commandScript>
	          <script type="text/javascript">	  
	          //<![CDATA[
	              
	              function applyDrilldown(data) {
	                  //console.log("apply drilldown, ", data.status);
	                  if(data && data.status=="success") {	                      
	                  	let $searchButton = $("#submitSearch");
                 	 	if($searchButton.length > 0) {
                 	 	    $searchButton.click();
                 	 	}
	                  }
	              }
	              
		            function initFacetWidgetMap() {
		                let areaString = '#{searchBean.facets.geoFacetting.feature}';
		                this.area = areaString.length > 0 ? JSON.parse(areaString) : undefined;
		                //console.log("area is ", areaString, this.area, setGeoFacetFeature);
		                let geoMap = new viewerJS.GeoMap({
	                	    mapId: "geoFacettingMap",
	                   		allowMovingFeatures: false,
	                   		language: "#{navigationHelper.localeString}",
	                   		popoverOnHover: false,
	                   		clusterMarkers: false,
	                   		fixed: true
	                   	});
	
	                    	geoMap.init({
	                            zoom: 1,
	                            center: [0,0] //long, lat
	                        });
	                    	if(this.area) {	                    	    
		                    	console.log("draw area" , this.area);
		                        switch(this.area.type) {
		                            case "polygon":
		                                geoMap.drawPolygon(this.area.vertices, {color: "blue"}, true);
		                                break;
		                            case "circle":
		                                geoMap.drawCircle(this.area.center, this.area.radius, {color: "blue"}, true);
		                                break;
		                            case "rectangle":
		                                geoMap.drawRectangle([this.area.vertices[0], this.area.vertices[2]], {color: "blue"}, true);
		                                break;
		                        }
	                    	}
						
	                    	
			                 	let $facetSearch = $("[data-geofacet='execute']");  
			                 	let $facetTriggerSearch = $("[data-geofacet='trigger-execute']");  
			                 	let $facetReset = $("[data-geofacet='reset']");  
			                 	let $facetInput = $("[data-geofacet='feature']");  
						$("#expandFacetMap").on("click", e => {
						    //console.log("open overlay ", this);
	                       	viewerJS.overlay.open($('#widgetGeoFacettingOverlay'), false, true, $node => {
	                       	    $node.hide();
	                       	})
	                       	.then(overlay => {
	                       	    overlay.node.show();
			                 	$facetTriggerSearch.off().on("click", () => {
			                 	   //console.log("trigger search");
			                 	   $facetSearch.click();
			                 	});
			                 	$facetReset.off().on("click", () => {
			                 	    this.area = undefined;
			                 	    overlay.close();
			                 	})
	                       	    //console.log("mount overlay map", overlay.node.get(0));
		                       	 riot.mount($("#geoFacettingOverlayMap"), "geomapsearch", {
		     					    inactive: false,
		     					    area : this.area,
		     					    onFeatureSelect: area => {
		     					        //console.log("Set facetting area", area);
		     					       console.log("submit area ", area);
		     					      	$facetInput.val(area ? JSON.stringify(area) : "");
			                       	    this.area = area;
		     					    }
		     					}); 
	                       	});                       	
		                })
					}
					$(document).ready(e => {					    
					    let facetWidgetMap = new initFacetWidgetMap();
					})				    
	            //]]>
		        </script>
        </h:form>
        
        </ui:fragment>
    </composite:implementation>
</ui:composition>
