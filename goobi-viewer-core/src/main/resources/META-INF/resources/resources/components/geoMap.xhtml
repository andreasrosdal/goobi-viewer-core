<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
	xmlns:composite="http://xmlns.jcp.org/jsf/composite"
	xmlns:f="http://xmlns.jcp.org/jsf/core"
	xmlns:h="http://xmlns.jcp.org/jsf/html">

    <composite:interface>
        <composite:attribute name="geoMap" required="true" type="io.goobi.viewer.model.maps.GeoMap" />
    	<composite:attribute name="mapId" required="false" default="geomap" /><composite:attribute name="linkTarget" required="false" default="_self" />
    	<composite:attribute name="linkToSearch" required="false" default="true" />
    	<composite:attribute name="linkTarget" required="false" default="_self" />
    	<composite:attribute name="showAnnotations" type="java.lang.Boolean" required="false" default="false"/>
    	<composite:attribute name="popoverOnHover" type="java.lang.Boolean" required="false" default="#{cc.attrs.geoMap.type == 'SOLR_QUERY'}"/>
    	<composite:attribute name="clusterMarkers" type="java.lang.Boolean" required="false" default="#{cc.attrs.geoMap.type == 'SOLR_QUERY'}"/>
    	
    </composite:interface>
    
	<composite:implementation>

		<div id="#{cc.attrs.mapId}" class="geomap" />
		<popover id="popoverTemplate_#{cc.attrs.mapId}">
		<h4 data-metadata="title"></h4>
		<span data-metadata="description"></span> </popover>
		<script>
		/**
		* put this code in anonymous function and execute it to limit the scope of declared variables to 
		* this script only
		**/
		//<![CDATA[
		(() => {

        	let geoMap = new viewerJS.GeoMap({
        	    mapId: "#{cc.attrs.mapId}",
           		language: "#{navigationHelper.localeString}",
           		layer : {
	           		allowMovingFeatures: false,
	           		popover: #{cc.attrs.geoMap.showPopover} ? "#popoverTemplate_#{cc.attrs.mapId}" : undefined,
	           		popoverOnHover: #{cc.attrs.popoverOnHover},
	           		clusterMarkers: #{cc.attrs.clusterMarkers},
           		}
           	});
           	$(document).ready(() => {                  		    
            	let view = #{cc.attrs.geoMap.initialView};
            	console.log("set initial view to ", view);
            	let features = #{cc.attrs.geoMap.featuresAsString};
            	geoMap.init(view);
            	let layer = new viewerJS.GeoMap.featureGroup(geoMap, {
            	    markerIcon: #{cc.attrs.geoMap.markerAsJSON}
            	})
            	layer.onFeatureClick.subscribe(feature => {
           	       if(feature.properties && feature.properties.link) {
           	           window.location.assign(feature.properties.link);
           	       }
           	    });
	        	if(#{cc.attrs.linkToSearch and cc.attrs.geoMap.type == 'SOLR_QUERY'}) {
	                let searchUrlTemplate = '#{geoMapBean.getCoordinateSearchQueryTemplate(cc.attrs.geoMap)}';
	                geoMap.onFeatureClick.subscribe( (feature) => {
	                    let queryUrl = searchUrlTemplate.replace("{lng}", feature.geometry.coordinates[0]);
	                    queryUrl = queryUrl.replace("{lat}", feature.geometry.coordinates[1]);
	//                     window.location = queryUrl;
	                    window.open(queryUrl, "#{cc.attrs.linkTarget}");
	                });
	            }
            	layer.init(features, true);
            	
            	if(#{cc.attrs.showAnnotations}) {            	    
            	 $("[data-geomap-feature]").each((index, ele) => {
                     let featureString = $(ele).attr("data-geomap-feature");
                     if(featureString) {
                         let feature = JSON.parse(featureString);
                         geoMap.addMarker(feature);
                         $(ele).parent().on("mouseenter",  () => {
                             geoMap.highlightMarker(feature);
                         });
                         $(ele).parent().on("mouseleave",  () => {
                             geoMap.highlightMarker(null);
                         });
                     }
                 });
                 geoMap.setView(geoMap.getViewAroundFeatures(layer.getFeatures()));
            	}
            })
		    
		})();
		//]]>
		</script>
	</composite:implementation>
</ui:composition>